; Copyright (c) uib gmbh (www.uib.de)
; This sourcecode is owned by uib gmbh
; and published under the Terms of the General Public License.
; credits: http://www.opsi.org/credits/

Set $SearchPattern$ = $ProductId$
; Parameter: $SearchPattern$ Suchbegriff in Registry
Sub_search_registry32_uninstall_keys
; Rückgabewert: $ResultList$ gefundene Einträge

if ( count ($ResultList$) = "0" )
	comment "No installations of " + $SearchPattern$ + " found in 32-bit registry. Nothing to do ;-)"
else
	Set $RegId$ = takeString(0, $ResultList$)	
	; 'OPSI' im DisplayName der Registry ist der entscheidende Punkt, ob eine vorherige Installatin via OPSI und 'files_install' gemacht wurde
	if (contains(GetRegistryStringValue32("[" + $RegPathUninstall$ + "\" + $RegId$ + "] DisplayName"), "OPSI"))
		Set $UninstallDir$ = GetRegistryStringValue32("[" + $RegPathUninstall$ + "\" + $RegId$ + "] InstallLocation")
		Sub_uninstall
	else
		logError "Es wurde eine Version von " + $ProductId$ +" gefunden, die manuell mittels Installer (install4j) installiert wurde. Diese kann nicht silent deinstalliert werden, Bitte zunächst manuell deinstallieren!"
	endif
endif

; Parameter: $SearchPattern$ Suchbegriff in Registry
Sub_search_registry64_uninstall_keys
; Rückgabewert: $ResultList$ gefundene Einträge

if ( count ($ResultList$) = "0" )
	comment "No installations of " + $SearchPattern$ + " found in 64-bit registry. Nothing to do ;-)"
else
	Set $RegId$ = takeString(0, $ResultList$)	
	; 'OPSI' im DisplayName der Registry ist der entscheidende Punkt, ob eine vorherige Installatin via OPSI und 'files_install' gemacht wurde
	if (contains(GetRegistryStringValue64("[" + $RegPathUninstall$ + "\" + $RegId$ + "] DisplayName"), "OPSI"))
		Set $UninstallDir$ = GetRegistryStringValue64("[" + $RegPathUninstall$ + "\" + $RegId$ + "] InstallLocation")
		Sub_uninstall
	else
		logError "Es wurde eine Version von " + $ProductId$ +" gefunden, die manuell mittels Installer (install4j) installiert wurde. Diese kann nicht silent deinstalliert werden. Bitte zunächst manuell deinstallieren!"
	endif
endif
        
[Sub_uninstall]

comment "Delete files"
Files_uninstall
	
comment "Cleanup registry"
Registry_uninstall /Sysnative

set $RegisterFileTypes$ = getProductProperty("register-file-types","no")
if ($RegisterFileTypes$ = "yes")
	comment "Register file types"
	Registry_uninstall_filetypes /SysNative	
endif

set $DesktopIcon$ = getProductProperty("desktopicon","no")
if $DesktopIcon$ = "yes"
	comment "Create common desktop icon"
	Linkfolder_uninstall_desktopicon	
endif

set $StartmenuEntry$ = getProductProperty("startmenuentry","no")
if $StartmenuEntry$ = "yes"
	comment "Create common startmenu entry"
	Linkfolder_uninstall_startmenu	
endif	

comment "include custom post deinstall file"
set $CustomPostDeinstall$ = getProductProperty("custom-post-deinstall","none")
if not ($CustomPostDeinstall$ = "none")
	if FileExists("%ScriptPath%\custom\" + $CustomPostDeinstall$)
		include_insert "%ScriptPath%\custom\" + $CustomPostDeinstall$
	endif
endif

[Files_uninstall]
delete -sf "$UninstallDir$"

[Registry_uninstall]
deletekey [$RegPathUninstall$\$ProductId$]

[Registry_uninstall_filetypes]
deletekey [HKLM\SOFTWARE\Classes\.graphml]
deletekey [HKLM\SOFTWARE\Classes\yEd]
deletekey [HKLM\SOFTWARE\Classes\.graphmlz]
deletekey [HKLM\SOFTWARE\Classes\yEd 1]
deletekey [HKLM\SOFTWARE\Classes\.ygf]
deletekey [HKLM\SOFTWARE\Classes\yEd 2]
deletekey [HKLM\SOFTWARE\Classes\.gml]
deletekey [HKLM\SOFTWARE\Classes\yEd 3]
deletekey [HKLM\SOFTWARE\Classes\.xgml]
deletekey [HKLM\SOFTWARE\Classes\yEd 4]
deletekey [HKLM\SOFTWARE\Classes\.tgf]
deletekey [HKLM\SOFTWARE\Classes\yEd 5]
deletekey [HKLM\SOFTWARE\Classes\.ged]
deletekey [HKLM\SOFTWARE\Classes\yEd 6]

[Linkfolder_uninstall_desktopicon]
set_basefolder common_desktopdirectory
set_subfolder ""
delete_element $ProductName$

[Linkfolder_uninstall_startmenu]
set_basefolder common_programs
delete_subfolder $ProductName$

